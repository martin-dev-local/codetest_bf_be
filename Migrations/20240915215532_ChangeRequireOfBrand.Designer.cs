// <auto-generated />
using CodetestBF.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodetestBF.WebApi.Migrations
{
    [DbContext(typeof(CodetestBFDb))]
    [Migration("20240915215532_ChangeRequireOfBrand")]
    partial class ChangeRequireOfBrand
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodetestBF.WebApi.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Volvo"
                        });
                });

            modelBuilder.Entity("CodetestBF.WebApi.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("VinNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("vehicles");


                    b.HasData(new
                        {
                            Id = 1,
                            BrandId = 1,
                            ModelName = "Focus", VinNumber = "VIN001", LicensePlate = "ABC001"
                        });
                });

            modelBuilder.Entity("CodetestBF.WebApi.Models.VehicleFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("features");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Leather seats"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Parking sensor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Xenon lights"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rear view camera"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sun roof"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bose sound system"
                        });
                });

            modelBuilder.Entity("VehicleVehicleFeature", b =>
                {
                    b.Property<int>("featuresId")
                        .HasColumnType("int");

                    b.Property<int>("vehiclesId")
                        .HasColumnType("int");

                    b.HasKey("featuresId", "vehiclesId");

                    b.HasIndex("vehiclesId");

                    b.ToTable("VehicleVehicleFeature");
                });

            modelBuilder.Entity("CodetestBF.WebApi.Models.Vehicle", b =>
                {
                    b.HasOne("CodetestBF.WebApi.Models.Brand", "VehicleBrand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleBrand");
                });

            modelBuilder.Entity("VehicleVehicleFeature", b =>
                {
                    b.HasOne("CodetestBF.WebApi.Models.VehicleFeature", null)
                        .WithMany()
                        .HasForeignKey("featuresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodetestBF.WebApi.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("vehiclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
